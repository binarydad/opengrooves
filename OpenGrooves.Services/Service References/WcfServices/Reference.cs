//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OpenGrooves.Services.WcfServices {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WcfServices.IEmailService")]
    public interface IEmailService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailService/SendMail", ReplyAction="http://tempuri.org/IEmailService/SendMailResponse")]
        void SendMail(string fromEmail, string fromName, string toEmail, string toName, string subject, string body);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEmailService/SendMail", ReplyAction="http://tempuri.org/IEmailService/SendMailResponse")]
        System.IAsyncResult BeginSendMail(string fromEmail, string fromName, string toEmail, string toName, string subject, string body, System.AsyncCallback callback, object asyncState);
        
        void EndSendMail(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEmailServiceChannel : OpenGrooves.Services.WcfServices.IEmailService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmailServiceClient : System.ServiceModel.ClientBase<OpenGrooves.Services.WcfServices.IEmailService>, OpenGrooves.Services.WcfServices.IEmailService {
        
        private BeginOperationDelegate onBeginSendMailDelegate;
        
        private EndOperationDelegate onEndSendMailDelegate;
        
        private System.Threading.SendOrPostCallback onSendMailCompletedDelegate;
        
        public EmailServiceClient() {
        }
        
        public EmailServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EmailServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmailServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmailServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SendMailCompleted;
        
        public void SendMail(string fromEmail, string fromName, string toEmail, string toName, string subject, string body) {
            base.Channel.SendMail(fromEmail, fromName, toEmail, toName, subject, body);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendMail(string fromEmail, string fromName, string toEmail, string toName, string subject, string body, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendMail(fromEmail, fromName, toEmail, toName, subject, body, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSendMail(System.IAsyncResult result) {
            base.Channel.EndSendMail(result);
        }
        
        private System.IAsyncResult OnBeginSendMail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fromEmail = ((string)(inValues[0]));
            string fromName = ((string)(inValues[1]));
            string toEmail = ((string)(inValues[2]));
            string toName = ((string)(inValues[3]));
            string subject = ((string)(inValues[4]));
            string body = ((string)(inValues[5]));
            return this.BeginSendMail(fromEmail, fromName, toEmail, toName, subject, body, callback, asyncState);
        }
        
        private object[] OnEndSendMail(System.IAsyncResult result) {
            this.EndSendMail(result);
            return null;
        }
        
        private void OnSendMailCompleted(object state) {
            if ((this.SendMailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendMailCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendMailAsync(string fromEmail, string fromName, string toEmail, string toName, string subject, string body) {
            this.SendMailAsync(fromEmail, fromName, toEmail, toName, subject, body, null);
        }
        
        public void SendMailAsync(string fromEmail, string fromName, string toEmail, string toName, string subject, string body, object userState) {
            if ((this.onBeginSendMailDelegate == null)) {
                this.onBeginSendMailDelegate = new BeginOperationDelegate(this.OnBeginSendMail);
            }
            if ((this.onEndSendMailDelegate == null)) {
                this.onEndSendMailDelegate = new EndOperationDelegate(this.OnEndSendMail);
            }
            if ((this.onSendMailCompletedDelegate == null)) {
                this.onSendMailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendMailCompleted);
            }
            base.InvokeAsync(this.onBeginSendMailDelegate, new object[] {
                        fromEmail,
                        fromName,
                        toEmail,
                        toName,
                        subject,
                        body}, this.onEndSendMailDelegate, this.onSendMailCompletedDelegate, userState);
        }
    }
}
